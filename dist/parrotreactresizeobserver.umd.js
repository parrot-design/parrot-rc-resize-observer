!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("react"),require("@parrotjs/react-hooks"),require("resize-observer-polyfill")):"function"==typeof define&&define.amd?define(["react","@parrotjs/react-hooks","resize-observer-polyfill"],t):(e="undefined"!=typeof globalThis?globalThis:e||self).ParrotRcResizeObserver=t(e.React,e.ParrotRcHooks,e["resize-observer-polyfill"])}(this,(function(e,t,r){"use strict";function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var n=o(e),i=o(r);return n.default.memo((r=>{const{children:o,disabled:u,onResize:l}=r,s=e.useRef(null),c=e.useRef(null),[f,a]=e.useState({width:0,height:0}),d=e.useCallback((()=>{c.current&&(c.current.disconnect(),c.current=null)}),[]),h=t.useForkRef(s,o.ref),b=e.useCallback((e=>{const t=e[0].target,{width:r,height:o}=t.getBoundingClientRect();if(r!==f.width||o!==f.height){a({width:r,height:o}),l&&Promise.resolve().then((()=>{null==l||l({width:r,height:o},t)}))}}),[l]),p=e.useCallback((()=>{u?d():!c.current&&s.current&&(c.current=new i.default(b),c.current.observe(s.current))}),[u,b,d]);return e.useEffect((()=>{p()}),[p]),t.useDestory((()=>d)),n.default.cloneElement(o,{ref:h})}))}));
